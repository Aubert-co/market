datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}



generator client {
  provider = "prisma-client-js"
  //output = "/node_modules/.prisma/client"

}

model User {
  id       Int       @id @default(autoincrement())
  name     String
  email    String    @unique
  password String

  stores   Store[]
  cartitems Cartitem[]
  couponUsages CouponUsage[]
  reviews       Review[]
  comments      Comment[]
  order         Order[]
  views         View[]
}

model Store {
  id          Int      @id @default(autoincrement())
  userId      Int
  name        String   @unique
  description String?
  photo       String?

  user        User     @relation(fields: [userId], references: [id])
  products    Product[]
  coupons     Coupon[]

  @@map("stores")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  imageUrl    String
  stock       Int      @default(0)
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean @default(true)
  storeId     Int
  stores      Store    @relation(fields: [storeId], references: [id])
  cartitems   Cartitem[]
  reviews     Review[]
  comments    Comment[]
  orders      Order[]
  views       View[]
  @@index([storeId])
}

model Cartitem {
  id        Int      @id @default(autoincrement())
  productId Int
  quantity  Int      @default(1)
  userId    Int

  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId]) 
}

model Coupon {
  id          Int           @id @default(autoincrement())
  code        String        @unique                 
  discount    Float                                 
  discountType String       
  quantity    Int                                  
  expiresAt   DateTime?                             
  storeId     Int?                                  
  store       Store?        @relation(fields: [storeId], references: [id])
  usages      CouponUsage[]
  orders       Order[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model CouponUsage {
  id        Int       @id @default(autoincrement())
  userId    Int
  couponId  Int
  usedAt    DateTime? 

  user      User      @relation(fields: [userId], references: [id])
  coupon    Coupon    @relation(fields: [couponId], references: [id])

  @@unique([userId, couponId])
}

model Review {
  id          Int       @id @default(autoincrement())
  userId      Int
  productId   Int
  orderId Int       
  rating      Int       
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])
  order       Order     @relation(fields: [orderId], references: [id])
}

model Comment {
  id          Int       @id @default(autoincrement())
  userId      Int
  productId   Int
  orderId Int
  content     String
  photoUrl    String?   // pode ser nulo
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])
  order       Order     @relation(fields: [orderId], references: [id])
}


model Order {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int

  product   Product   @relation(fields: [productId], references: [id])
  productId Int

  total     Float
  quantity  Int
  price     Float
  status    String    @default("pending")
  createdAt DateTime  @default(now())

  coupon    Coupon?   @relation(fields: [couponId], references: [id])
  couponId  Int?

  reviews   Review[]
  comments  Comment[]
}


model View {
  id         Int       @id @default(autoincrement())
  productId  Int
  userId     Int?      
  viewedAt   DateTime  @default(now())

  product    Product   @relation(fields: [productId], references: [id])
  user       User?     @relation(fields: [userId], references: [id])
}
